// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/aerosystems/recaptcha-service/internal/config"
	"github.com/aerosystems/recaptcha-service/internal/http"
	"github.com/aerosystems/recaptcha-service/internal/infrastructure/rest"
	"github.com/aerosystems/recaptcha-service/internal/repository/google"
	"github.com/aerosystems/recaptcha-service/internal/usecases"
	"github.com/aerosystems/recaptcha-service/pkg/logger"
	"github.com/sirupsen/logrus"
)

// Injectors from wire.go:

//go:generate wire
func InitApp() *App {
	logger := ProvideLogger()
	logrusLogger := ProvideLogrusLogger(logger)
	config := ProvideConfig()
	baseHandler := ProvideBaseHandler(logrusLogger, config)
	api := ProvideRecaptchaApi(config)
	recaptchaUsecase := ProvideRecaptchaUsecase(api)
	validateHandler := ProvideValidateHandler(baseHandler, recaptchaUsecase)
	server := ProvideHttpServer(logrusLogger, validateHandler)
	app := ProvideApp(logrusLogger, config, server)
	return app
}

func ProvideApp(log *logrus.Logger, cfg *config.Config, httpServer *HttpServer.Server) *App {
	app := NewApp(log, cfg, httpServer)
	return app
}

func ProvideLogger() *logger.Logger {
	loggerLogger := logger.NewLogger()
	return loggerLogger
}

func ProvideConfig() *config.Config {
	configConfig := config.NewConfig()
	return configConfig
}

func ProvideHttpServer(log *logrus.Logger, validateHandler *rest.ValidateHandler) *HttpServer.Server {
	server := HttpServer.NewServer(log, validateHandler)
	return server
}

func ProvideRecaptchaUsecase(recaptchaRepo usecases.RecaptchaRepository) *usecases.RecaptchaUsecase {
	recaptchaUsecase := usecases.NewRecaptchaUsecase(recaptchaRepo)
	return recaptchaUsecase
}

// wire.go:

func ProvideLogrusLogger(log *logger.Logger) *logrus.Logger {
	return log.Logger
}

func ProvideBaseHandler(log *logrus.Logger, cfg *config.Config) *rest.BaseHandler {
	return rest.NewBaseHandler(log, cfg.Mode)
}

func ProvideValidateHandler(baseHandler *rest.BaseHandler, recaptchaUsecase rest.RecaptchaUsecase) *rest.ValidateHandler {
	return rest.NewValidateHandler(baseHandler, recaptchaUsecase)
}

func ProvideRecaptchaApi(cfg *config.Config) *google.Api {
	return google.NewApi(cfg.RecaptchaSecretV2, cfg.RecaptchaSecretV3)
}
